/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ukio.kata.business

import main.kotlin.ukio.kata.model.Payment
import main.kotlin.ukio.kata.model.Reservation
import ukio.kata.helpers.DateHelper
import ukio.kata.data.PaymentsData
import java.time.LocalDate

class PaymentSystem {

    val FINAL_CLEANING = 200.0

    fun calculateBookingPaymentAmount(reservation: Reservation) : Double {
        val completeMoths = DateHelper.calculateCompleteMonths(reservation.initDate, reservation.endDate)
        return if (completeMoths > 3
                || (completeMoths == 3 && hasHalfMonth(reservation.initDate))
                || (completeMoths == 3 && hasHalfMonth(reservation.endDate))
        ){
            ((reservation.apartment.rentPerMonth * 2)
                    + (reservation.apartment.utilitiesPerMonth * 2))
        } else {
            ((reservation.apartment.rentPerMonth * completeMoths)
                    + (reservation.apartment.utilitiesPerMonth * completeMoths) + FINAL_CLEANING)
        }
    }

    fun buildInvoiceFrom(reservation: Reservation): PaymentsData {
        var paymentsList : MutableList<Payment> = mutableListOf<Payment>()
        val today = LocalDate.now()
        var bookingPayment = 0.0
        var initialDate = reservation.initDate
        if (!(reservation.initDate..reservation.endDate).contains(today)) {
            bookingPayment = calculateBookingPaymentAmount(reservation)
        } else {
            initialDate = today
        }
        val monthsDiference =
            reservation.endDate.monthValue - initialDate.monthValue +
                    ((reservation.endDate.year - initialDate.year)*12)
        var totalAmount = bookingPayment
        for (i in 1 until monthsDiference) {
            var amount = reservation.apartment.rentPerMonth + reservation.apartment.utilitiesPerMonth
            if ((i == 1 && hasHalfMonth(reservation.initDate))
                    || (i == monthsDiference-1 && hasHalfMonth(reservation.endDate))) {
                amount /= 2
            }
            var paymentDay= calculatePaymentDay(initialDate, i, reservation.endDate)
            if (i == monthsDiference-1) {
                amount += FINAL_CLEANING
            }
            paymentsList.add(Payment(amount, paymentDay, reservation.apartment))
            totalAmount += amount
        }
        return PaymentsData(paymentsList, totalAmount, bookingPayment)
    }

    private fun calculatePaymentDay(initDate: LocalDate, monthsToGo: Int, endDate: LocalDate): LocalDate {
        var paymentDay = initDate.plusMonths(monthsToGo.toLong())
        if (paymentDay.monthValue == endDate.minusMonths(1).monthValue && hasHalfMonth(endDate)) {
            paymentDay = endDate.minusMonths(1)
        } else {
            paymentDay = paymentDay.plusDays((paymentDay.month.length(paymentDay.isLeapYear) - paymentDay.dayOfMonth).toLong())
        }
        return paymentDay
    }

    private fun hasHalfMonth(date: LocalDate): Boolean {
        return date.dayOfMonth == 15
    }
}
